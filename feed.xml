<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hu-xue.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://hu-xue.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-03T16:47:23+00:00</updated><id>https://hu-xue.github.io/feed.xml</id><title type="html">Xue Hu</title><subtitle>Hu Xue&apos;s Personal site powered by github pages. </subtitle><entry><title type="html">A Demo of MOT Tutorial use Matlab2023</title><link href="https://hu-xue.github.io/blog/2023/model_based_mot/" rel="alternate" type="text/html" title="A Demo of MOT Tutorial use Matlab2023"/><published>2023-12-31T22:25:00+00:00</published><updated>2023-12-31T22:25:00+00:00</updated><id>https://hu-xue.github.io/blog/2023/model_based_mot</id><content type="html" xml:base="https://hu-xue.github.io/blog/2023/model_based_mot/"><![CDATA[<h2 id="引言">引言</h2> <p>这是一个多目标跟踪例程，建立在运动模型和卡尔曼滤波的基础上的实现。</p> <h2 id="模型构建">模型构建</h2> <p>首先我们明确系统的运动模型为：</p> \[\mathrm{x}_{t} = [ x_t,y_t,\phi_t,v_t,\omega_t ]\] <p>根据运动模型:</p> \[\begin{cases} \dot{x} =v_x=v cos(\phi+\gamma ) \\ \dot{y}=v_y=vsin(\phi+\gamma ) \end{cases}\] \[\begin{cases} v_{xv}=v cos(\gamma ) \\ v_{yv}=v sin(\gamma ) \end{cases}\] \[\dot{\phi}=\frac{v_{yv}}{L}=\frac{vsin(\gamma)}{L}\] <p>所以车体的运动模型是:</p> \[\begin{cases} \dot{x}=v cos(\phi+\gamma ) \\ \dot{y}=vsin(\phi+\gamma ) \\ \dot{\phi}=\frac{vsin(\gamma)}{L} \end{cases}\] <p>离散化得:</p> \[\begin{cases} \frac{x_{k+1}-x_{k}}{\Delta T}=v_{k+1}cos(\phi_{k}+\gamma_{k+1}) \\ \frac{y_{k+1}-y_{k}}{\Delta T}=v_{k+1}sin(\phi_{k}+\gamma_{k+1}) \\ \frac{\phi_{k+1}-\phi_{k}}{\Delta T}=\frac{v_{k+1}sin(\gamma_{k+1})}{L} \end{cases}\] <p>转为迭代的形式就是:</p> \[\begin{cases} x_{k+1} = x_k + \Delta Tv_{k+1}cos(\phi_k + \gamma_{k+1}) + q_{x_{k+1}} \\ y_{k+1} = y_k + \Delta Tv_{k+1}sin(\phi_k + \gamma_{k+1}) + q_{y_{k+1}} \\ \phi_{k+1} = \phi_{k} + \frac{\Delta T v_{k+1}sin(\gamma_{k+1})}{L} + q_{\phi_{k+1}} \end{cases}\] <p>写为矩阵的形式就是:</p> \[\begin{bmatrix} x_{k+1} \\ y_{k+1} \\ \phi_{k+1} \end{bmatrix} = \begin{bmatrix} x_{k} \\ y_{k} \\ \phi_{k} \end{bmatrix} + \begin{bmatrix} \Delta Tv_{k+1}cos(\phi_k + \gamma_{k+1}) \\ \Delta Tv_{k+1}sin(\phi_k + \gamma_{k+1}) \\ \frac{\Delta T v_{k+1}sin(\gamma_{k+1})}{L} \end{bmatrix} + \begin{bmatrix} q_{x_{k+1}} \\ q_{y_{k+1}} \\ q_{\phi_{k+1}} \end{bmatrix}\] <p>贴近真实模型需要对速度, 最大角度, 最大角速度等进行限制:</p> \[\begin{cases} |\gamma| &lt; \gamma_{max} \\ |\dot{\gamma}| &lt; Rate_{max} \\ v &lt; v_{max} \end{cases}\] <p>如果对于一个多目标跟踪系统, 系统在时刻 \(t\) 检测到 \(k\) 辆车, 则对应的每辆车都有一个独立的运动模型. 所以需要有一个数据库保存所有跟踪到的每个 \(id\) 的车辆的运动模型的信息. 且这个信息是随着系统的时间更新而更新的.</p> <p>对于车辆搭载的传感器, 这里为了简单我们假设传感器可以直接观测到目标点的 \(x,y\) 坐标. 所以我们可以定义观测为:</p> \[\mathrm{z}_{i_t} = \begin{bmatrix} x_t \\ y_t \\ \theta_t \end{bmatrix}= \begin{bmatrix} \sqrt{(x_{i_{t}}-x_{t})^2+(y_{i_{t}}-y_{t})^2} \\ y \\ \phi_{t}-\phi_{i_{t}} \end{bmatrix}\] <p>上式的观测表示的是对 \(t\) 时刻, 第 \(i\) 个物体在智能车坐标系下的 \(x,y\) 坐标.</p> <h2 id="代码实现">代码实现</h2> <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">clc</span><span class="p">;</span> <span class="c1">% 清空</span>
<span class="k">while</span>

<span class="k">end</span>

</code></pre></div></div> <h2 id="结果展示">结果展示</h2>]]></content><author><name></name></author><category term="learn-posts"/><category term="MOT"/><summary type="html"><![CDATA[this is a post of my main study.]]></summary></entry></feed>